{"version":3,"sources":["script.js"],"names":["lettersPattern","currentGuessCount","currentGuess","document","querySelector","words","solutionWord","chooseWord","randomItem","Math","floor","random","length","console","log","addEventListener","e","key","keypress","test","dataset","letters","updateLetter","deleteFromLetters","i","checkLetter","letter","newLetters","currentTile","updateTiles","tileNumber","innerHTML","oldLetters","slice","deleteFromTiles","innerText","position","guessedLetter","charAt","solutionLetter","checkLetterExists","includes"],"mappings":"AAAA,aAEA,IAAMA,eAAiB,QACnBC,kBAAoB,EACpBC,aAAeC,SAASC,cAAc,SAAWH,mBAGjDI,MAAQ,CACT,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAC5CC,aAAe,GAEhBC,WAAa,WACf,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAYN,MAAMO,QAAY,EAChEC,QAAQC,IAAIN,GACZF,aAAeD,MAAMG,GACrBK,QAAQC,IAAIR,eAEhBC,aAEAJ,SAASY,iBAAiB,WAAW,SAACC,GAClCH,QAAQC,IAAI,YAAcE,EAAEC,KAC5BJ,QAAQC,IAAKZ,cAChB,IAAIgB,EAAWF,EAAEC,IACjB,GAAsB,GAAnBC,EAASN,QAAeZ,eAAemB,KAAKH,EAAEC,MAAQf,aAAakB,QAAQC,QAAQT,OAAQ,EAE3FC,QAAQC,IAAI,cACZQ,aAAaJ,QACT,GAAY,aAATF,EAAEC,KAAsD,IAAhCf,aAAakB,QAAQC,QACpDR,QAAQC,IAAI,aACZS,yBACI,GAAa,SAATP,EAAEC,KAAyD,GAAvCf,aAAakB,QAAQC,QAAQT,OAAa,CACtEC,QAAQC,IAAI,gBACZ,IAAI,IAAIU,EAAI,EAAGA,EAAE,EAAGA,IAChBC,YAAYD,OAMpB,IAAMF,aAAe,SAACI,GAClB,IAEIC,EAFazB,aAAakB,QAAQC,QAERK,EAC1BE,EAAcD,EAAWf,OAC7BV,aAAakB,QAAQC,QAAUM,EAC/BE,YAAYD,EAAaF,IAGvBG,YAAc,SAACC,EAAYJ,GACXvB,SAASC,cAAc,aAAe0B,GAE5CC,UAAYL,GAMtBH,kBAAoB,WACtB,IAAIS,EAAa9B,aAAakB,QAAQC,QAElCM,EAAaK,EAAWC,MAAM,GAAI,GACtC/B,aAAakB,QAAQC,QAAUM,EAC/BO,gBAAgBF,EAAWpB,SAIzBsB,gBAAkB,SAACJ,GACrB3B,SAASC,cAAc,aAAe0B,GAAYK,UAAW,IAM3DV,YAAc,SAACW,GACjB,IAAIC,EAAgBnC,aAAakB,QAAQC,QAAQiB,OAAOF,GACpDG,EAAiBjC,aAAagC,OAAOF,GAIzC,OAFAvB,QAAQC,IAAKuB,EAAeE,GAEzBF,GAAiBE,EACT,UAEAC,kBAAkBH,GAAiB,WAAa,UAMzDG,kBAAoB,SAACd,GACvBpB,aAAamC,SAASf","file":"script.js","sourcesContent":["\r\n\r\nconst lettersPattern = /[a-z]/;\r\nlet currentGuessCount = 1;\r\nlet currentGuess = document.querySelector('#guess' + currentGuessCount);\r\n// let currentLetters = currentGuess.dataset.letters;\r\n\r\nlet words = [\r\n   'baker','store','horse','speak','clone','apple','bread'];\r\n   let solutionWord = '';\r\n\r\nconst chooseWord = () => {\r\n    let randomItem = (Math.floor(Math.random() * (words.length))) + 1;\r\n    console.log(randomItem);\r\n    solutionWord = words[randomItem];\r\n    console.log(solutionWord);\r\n}\r\nchooseWord();\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n    console.log('keypress ' + e.key);\r\n    console.log (currentGuess);\r\n let keypress = e.key;\r\n if(keypress.length == 1 && lettersPattern.test(e.key) && currentGuess.dataset.letters.length <5) {\r\n\r\n    console.log('is letter ');\r\n    updateLetter(keypress);\r\n } else if(e.key == 'Backspace' && currentGuess.dataset.letters != '' ) {\r\n    console.log('backspace');\r\n    deleteFromLetters();\r\n } else if (e.key == 'Enter' && currentGuess.dataset.letters.length == 5) {\r\n    console.log('submit guess');\r\n    for(let i = 0; i<5; i++) {\r\n        checkLetter(i);\r\n    }\r\n\r\n }\r\n});\r\n\r\nconst updateLetter = (letter) => {\r\n    let oldletters = currentGuess.dataset.letters;\r\n   // let tileNumber = \r\n    let newLetters = oldletters + letter;\r\n    let currentTile = newLetters.length;\r\n    currentGuess.dataset.letters = newLetters;\r\n    updateTiles(currentTile, letter);\r\n};\r\n\r\nconst updateTiles = (tileNumber, letter) => {\r\n    let currentTile = document.querySelector('#guessTile' + tileNumber);\r\n\r\n    currentTile.innerHTML = letter;\r\n    \r\n};\r\n\r\n//backspace delete last letter\r\n\r\nconst deleteFromLetters = () => {\r\n    let oldLetters = currentGuess.dataset.letters;\r\n\r\n    let newLetters = oldLetters.slice(0, -1);\r\n    currentGuess.dataset.letters = newLetters;\r\n    deleteFromTiles(oldLetters.length);\r\n};\r\n\r\n\r\nconst deleteFromTiles = (tileNumber) => {\r\n    document.querySelector('#guessTile' + tileNumber).innerText ='';\r\n};\r\n\r\n\r\n//check letter to solution\r\n\r\nconst checkLetter = (position) => {\r\n    let guessedLetter = currentGuess.dataset.letters.charAt(position);\r\n    let solutionLetter = solutionWord.charAt(position);\r\n\r\n    console.log( guessedLetter, solutionLetter);\r\n\r\n    if(guessedLetter == solutionLetter) {\r\n        return 'correct';\r\n    } else {\r\n        return checkLetterExists(guessedLetter) ? 'present ' : 'absent';\r\n\r\n\r\n    }\r\n};\r\n\r\nconst checkLetterExists = (letter) => {\r\n    solutionWord.includes(letter);\r\n};"]}